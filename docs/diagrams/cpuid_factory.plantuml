@startuml ICpuIdFactory

abstract class ICpuIdFactory {
    +{abstract} create(cpunum: int) : unique_ptr<ICpuId>
    +~ICpuIdFactory() = default
}

class " " as Global<T> <<(G,#FF7700) global free>> {
    +CreateCpuIdFactory(config: const Config&) :\n    std::unique_ptr<ICpuIdFactory>
}

class " " as GlobalDefault<T as CpuIdDefaultConfig> <<(G,#FF7700) global free>> {
    +CreateCpuIdFactory<>(config: const CpuIdDefaultConfig&) :\n    std::unique_ptr<ICpuIdFactory>
}

class " " as GlobalNative<T as CpuIdNativeConfig> <<(G,#FF7700) global free>> {
    +CreateCpuIdFactory<>(config: const CpuIdNativeConfig&) :\n    std::unique_ptr<ICpuIdFactory>
}

class CpuIdFactoryWithCallback<CreationCallback> {
    +CpuIdFactoryWithCallback(callback: CreationCallback&)
    +create(cpunum: int) : unique_ptr<ICpuId>
}
note bottom
    The `create` method then uses
    the callback to instantiate the
    `ICpuId` object.
end note

class ICpuId { }

class CpuIdNative { }

CpuIdNative .l.|> ICpuId
CpuIdFactoryWithCallback .r.|> ICpuIdFactory

Global -d-> GlobalDefault : <<specialised by>>
Global -d-> GlobalNative : <<specialised by>>
GlobalDefault -d-> CpuIdFactoryWithCallback : <<instantiates>>
GlobalNative -d-> CpuIdFactoryWithCallback : <<instantiates>>

GlobalNative .r.> CpuIdNative : <<returns>>
CpuIdFactoryWithCallback -d-> CpuIdNative : <<instantiates>>
@enduml
